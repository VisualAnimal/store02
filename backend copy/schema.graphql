# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Brand {
  id: ID!
  name: String
  models(where: ModelWhereInput! = {}, orderBy: [ModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ModelWhereUniqueInput): [Model!]
  modelsCount(where: ModelWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  updateAt: DateTime
}

input BrandWhereUniqueInput {
  id: ID
}

input BrandWhereInput {
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  id: IDFilter
  name: StringFilter
  models: ModelManyRelationFilter
  products: ProductManyRelationFilter
  updateAt: DateTimeNullableFilter
}

input ModelManyRelationFilter {
  every: ModelWhereInput
  some: ModelWhereInput
  none: ModelWhereInput
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input BrandOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updateAt: OrderDirection
}

input BrandUpdateInput {
  name: String
  models: ModelRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  updateAt: DateTime
}

input ModelRelateToManyForUpdateInput {
  disconnect: [ModelWhereUniqueInput!]
  set: [ModelWhereUniqueInput!]
  create: [ModelCreateInput!]
  connect: [ModelWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input BrandUpdateArgs {
  where: BrandWhereUniqueInput!
  data: BrandUpdateInput!
}

input BrandCreateInput {
  name: String
  models: ModelRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  updateAt: DateTime
}

input ModelRelateToManyForCreateInput {
  create: [ModelCreateInput!]
  connect: [ModelWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Model {
  id: ID!
  name: String
  brand: Brand
  capacities(where: CapacityWhereInput! = {}, orderBy: [CapacityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CapacityWhereUniqueInput): [Capacity!]
  capacitiesCount(where: CapacityWhereInput! = {}): Int
  colors(where: ColorWhereInput! = {}, orderBy: [ColorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ColorWhereUniqueInput): [Color!]
  colorsCount(where: ColorWhereInput! = {}): Int
  versions(where: VersionWhereInput! = {}, orderBy: [VersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VersionWhereUniqueInput): [Version!]
  versionsCount(where: VersionWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  updateAt: DateTime
}

input ModelWhereUniqueInput {
  id: ID
}

input ModelWhereInput {
  AND: [ModelWhereInput!]
  OR: [ModelWhereInput!]
  NOT: [ModelWhereInput!]
  id: IDFilter
  name: StringFilter
  brand: BrandWhereInput
  capacities: CapacityManyRelationFilter
  colors: ColorManyRelationFilter
  versions: VersionManyRelationFilter
  products: ProductManyRelationFilter
  updateAt: DateTimeNullableFilter
}

input CapacityManyRelationFilter {
  every: CapacityWhereInput
  some: CapacityWhereInput
  none: CapacityWhereInput
}

input ColorManyRelationFilter {
  every: ColorWhereInput
  some: ColorWhereInput
  none: ColorWhereInput
}

input VersionManyRelationFilter {
  every: VersionWhereInput
  some: VersionWhereInput
  none: VersionWhereInput
}

input ModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updateAt: OrderDirection
}

input ModelUpdateInput {
  name: String
  brand: BrandRelateToOneForUpdateInput
  capacities: CapacityRelateToManyForUpdateInput
  colors: ColorRelateToManyForUpdateInput
  versions: VersionRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  updateAt: DateTime
}

input BrandRelateToOneForUpdateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
}

input CapacityRelateToManyForUpdateInput {
  disconnect: [CapacityWhereUniqueInput!]
  set: [CapacityWhereUniqueInput!]
  create: [CapacityCreateInput!]
  connect: [CapacityWhereUniqueInput!]
}

input ColorRelateToManyForUpdateInput {
  disconnect: [ColorWhereUniqueInput!]
  set: [ColorWhereUniqueInput!]
  create: [ColorCreateInput!]
  connect: [ColorWhereUniqueInput!]
}

input VersionRelateToManyForUpdateInput {
  disconnect: [VersionWhereUniqueInput!]
  set: [VersionWhereUniqueInput!]
  create: [VersionCreateInput!]
  connect: [VersionWhereUniqueInput!]
}

input ModelUpdateArgs {
  where: ModelWhereUniqueInput!
  data: ModelUpdateInput!
}

input ModelCreateInput {
  name: String
  brand: BrandRelateToOneForCreateInput
  capacities: CapacityRelateToManyForCreateInput
  colors: ColorRelateToManyForCreateInput
  versions: VersionRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  updateAt: DateTime
}

input BrandRelateToOneForCreateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input CapacityRelateToManyForCreateInput {
  create: [CapacityCreateInput!]
  connect: [CapacityWhereUniqueInput!]
}

input ColorRelateToManyForCreateInput {
  create: [ColorCreateInput!]
  connect: [ColorWhereUniqueInput!]
}

input VersionRelateToManyForCreateInput {
  create: [VersionCreateInput!]
  connect: [VersionWhereUniqueInput!]
}

type Capacity {
  id: ID!
  name: String
  model: Model
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  updateAt: DateTime
}

input CapacityWhereUniqueInput {
  id: ID
}

input CapacityWhereInput {
  AND: [CapacityWhereInput!]
  OR: [CapacityWhereInput!]
  NOT: [CapacityWhereInput!]
  id: IDFilter
  name: StringFilter
  model: ModelWhereInput
  products: ProductManyRelationFilter
  updateAt: DateTimeNullableFilter
}

input CapacityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updateAt: OrderDirection
}

input CapacityUpdateInput {
  name: String
  model: ModelRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  updateAt: DateTime
}

input ModelRelateToOneForUpdateInput {
  create: ModelCreateInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
}

input CapacityUpdateArgs {
  where: CapacityWhereUniqueInput!
  data: CapacityUpdateInput!
}

input CapacityCreateInput {
  name: String
  model: ModelRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  updateAt: DateTime
}

input ModelRelateToOneForCreateInput {
  create: ModelCreateInput
  connect: ModelWhereUniqueInput
}

type Color {
  id: ID!
  name: String
  model: Model
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  updateAt: DateTime
  picture: String
  img: String
}

input ColorWhereUniqueInput {
  id: ID
}

input ColorWhereInput {
  AND: [ColorWhereInput!]
  OR: [ColorWhereInput!]
  NOT: [ColorWhereInput!]
  id: IDFilter
  name: StringFilter
  model: ModelWhereInput
  products: ProductManyRelationFilter
  updateAt: DateTimeNullableFilter
  picture: StringFilter
  img: StringFilter
}

input ColorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updateAt: OrderDirection
  picture: OrderDirection
  img: OrderDirection
}

input ColorUpdateInput {
  name: String
  model: ModelRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  updateAt: DateTime
  picture: String
  img: String
}

input ColorUpdateArgs {
  where: ColorWhereUniqueInput!
  data: ColorUpdateInput!
}

input ColorCreateInput {
  name: String
  model: ModelRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  updateAt: DateTime
  picture: String
  img: String
}

type Version {
  id: ID!
  name: String
  model: Model
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  updateAt: DateTime
}

input VersionWhereUniqueInput {
  id: ID
}

input VersionWhereInput {
  AND: [VersionWhereInput!]
  OR: [VersionWhereInput!]
  NOT: [VersionWhereInput!]
  id: IDFilter
  name: StringFilter
  model: ModelWhereInput
  products: ProductManyRelationFilter
  updateAt: DateTimeNullableFilter
}

input VersionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updateAt: OrderDirection
}

input VersionUpdateInput {
  name: String
  model: ModelRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  updateAt: DateTime
}

input VersionUpdateArgs {
  where: VersionWhereUniqueInput!
  data: VersionUpdateInput!
}

input VersionCreateInput {
  name: String
  model: ModelRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  updateAt: DateTime
}

type Product {
  id: ID!
  price: String
  brand: Brand
  model: Model
  capacity: Capacity
  color: Color
  version: Version
  name: String
  description: String
  updateAt: DateTime
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  price: StringFilter
  brand: BrandWhereInput
  model: ModelWhereInput
  capacity: CapacityWhereInput
  color: ColorWhereInput
  version: VersionWhereInput
  name: StringFilter
  description: StringFilter
  updateAt: DateTimeNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  price: OrderDirection
  name: OrderDirection
  description: OrderDirection
  updateAt: OrderDirection
}

input ProductUpdateInput {
  price: String
  brand: BrandRelateToOneForUpdateInput
  model: ModelRelateToOneForUpdateInput
  capacity: CapacityRelateToOneForUpdateInput
  color: ColorRelateToOneForUpdateInput
  version: VersionRelateToOneForUpdateInput
  name: String
  description: String
  updateAt: DateTime
}

input CapacityRelateToOneForUpdateInput {
  create: CapacityCreateInput
  connect: CapacityWhereUniqueInput
  disconnect: Boolean
}

input ColorRelateToOneForUpdateInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
  disconnect: Boolean
}

input VersionRelateToOneForUpdateInput {
  create: VersionCreateInput
  connect: VersionWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  price: String
  brand: BrandRelateToOneForCreateInput
  model: ModelRelateToOneForCreateInput
  capacity: CapacityRelateToOneForCreateInput
  color: ColorRelateToOneForCreateInput
  version: VersionRelateToOneForCreateInput
  name: String
  description: String
  updateAt: DateTime
}

input CapacityRelateToOneForCreateInput {
  create: CapacityCreateInput
  connect: CapacityWhereUniqueInput
}

input ColorRelateToOneForCreateInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
}

input VersionRelateToOneForCreateInput {
  create: VersionCreateInput
  connect: VersionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createBrand(data: BrandCreateInput!): Brand
  createBrands(data: [BrandCreateInput!]!): [Brand]
  updateBrand(where: BrandWhereUniqueInput!, data: BrandUpdateInput!): Brand
  updateBrands(data: [BrandUpdateArgs!]!): [Brand]
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteBrands(where: [BrandWhereUniqueInput!]!): [Brand]
  createModel(data: ModelCreateInput!): Model
  createModels(data: [ModelCreateInput!]!): [Model]
  updateModel(where: ModelWhereUniqueInput!, data: ModelUpdateInput!): Model
  updateModels(data: [ModelUpdateArgs!]!): [Model]
  deleteModel(where: ModelWhereUniqueInput!): Model
  deleteModels(where: [ModelWhereUniqueInput!]!): [Model]
  createCapacity(data: CapacityCreateInput!): Capacity
  createCapacities(data: [CapacityCreateInput!]!): [Capacity]
  updateCapacity(where: CapacityWhereUniqueInput!, data: CapacityUpdateInput!): Capacity
  updateCapacities(data: [CapacityUpdateArgs!]!): [Capacity]
  deleteCapacity(where: CapacityWhereUniqueInput!): Capacity
  deleteCapacities(where: [CapacityWhereUniqueInput!]!): [Capacity]
  createColor(data: ColorCreateInput!): Color
  createColors(data: [ColorCreateInput!]!): [Color]
  updateColor(where: ColorWhereUniqueInput!, data: ColorUpdateInput!): Color
  updateColors(data: [ColorUpdateArgs!]!): [Color]
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteColors(where: [ColorWhereUniqueInput!]!): [Color]
  createVersion(data: VersionCreateInput!): Version
  createVersions(data: [VersionCreateInput!]!): [Version]
  updateVersion(where: VersionWhereUniqueInput!, data: VersionUpdateInput!): Version
  updateVersions(data: [VersionUpdateArgs!]!): [Version]
  deleteVersion(where: VersionWhereUniqueInput!): Version
  deleteVersions(where: [VersionWhereUniqueInput!]!): [Version]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandWhereUniqueInput): [Brand!]
  brand(where: BrandWhereUniqueInput!): Brand
  brandsCount(where: BrandWhereInput! = {}): Int
  models(where: ModelWhereInput! = {}, orderBy: [ModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ModelWhereUniqueInput): [Model!]
  model(where: ModelWhereUniqueInput!): Model
  modelsCount(where: ModelWhereInput! = {}): Int
  capacities(where: CapacityWhereInput! = {}, orderBy: [CapacityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CapacityWhereUniqueInput): [Capacity!]
  capacity(where: CapacityWhereUniqueInput!): Capacity
  capacitiesCount(where: CapacityWhereInput! = {}): Int
  colors(where: ColorWhereInput! = {}, orderBy: [ColorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ColorWhereUniqueInput): [Color!]
  color(where: ColorWhereUniqueInput!): Color
  colorsCount(where: ColorWhereInput! = {}): Int
  versions(where: VersionWhereInput! = {}, orderBy: [VersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VersionWhereUniqueInput): [Version!]
  version(where: VersionWhereUniqueInput!): Version
  versionsCount(where: VersionWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
