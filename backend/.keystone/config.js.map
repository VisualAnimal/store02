{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\r\n//\r\n// This file is what Keystone uses as the entry-point to your headless backend\r\n//\r\n// Keystone imports the default export of this file, expecting a Keystone configuration object\r\n//   you can find out more at https://keystonejs.com/docs/apis/config\r\n\r\nimport { config } from '@keystone-6/core';\r\n\r\n// to keep this file tidy, we define our schema in a different file\r\nimport { lists } from './schema';\r\n\r\n// authentication is configured separately here too, but you might move this elsewhere\r\n// when you write your list-level access control functions, as they typically rely on session data\r\nimport { withAuth, session } from './auth';\r\n\r\nexport default withAuth(\r\n  config({\r\n    server: {\r\n      cors:{}\r\n    },\r\n    db: {\r\n      // we're using sqlite for the fastest startup experience\r\n      //   for more information on what database might be appropriate for you\r\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\r\n      provider: 'sqlite',\r\n      url: 'file:./keystone.db',\r\n    },\r\n    lists,\r\n    session,\r\n  })\r\n);\r\n", "// Welcome to your schema\r\n//   Schema driven development is Keystone's modus operandi\r\n//\r\n// This file is where we define the lists, fields and hooks for our data.\r\n// If you want to learn more about how lists are configured, please read\r\n// - https://keystonejs.com/docs/config/lists\r\n\r\nimport { list } from '@keystone-6/core';\r\nimport { allowAll } from '@keystone-6/core/access';\r\n\r\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\r\n//   this is a few common fields for an example\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n} from '@keystone-6/core/fields';\r\n\r\n// the document field is a more complicated field, so it has it's own package\r\nimport { document } from '@keystone-6/fields-document';\r\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\r\n\r\n// when using Typescript, you can refine your types to a stricter subset by importing\r\n// the generated types from '.keystone/types'\r\nimport type { Lists } from '.keystone/types';\r\n\r\nexport const lists: Lists = {\r\n  User: list({\r\n    // WARNING\r\n    //   for this starter project, anyone can create, query, update and delete anything\r\n    //   if you want to prevent random people on the internet from accessing your data,\r\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n    access: allowAll,\r\n\r\n    // this is the fields for our User list\r\n    fields: {\r\n      // by adding isRequired, we enforce that every User should have a name\r\n      //   if no name is provided, an error will be displayed\r\n      name: text({ validation: { isRequired: true } }),\r\n\r\n      email: text({\r\n        validation: { isRequired: true },\r\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\r\n        // email as another user - this may or may not be a good idea for your project\r\n        isIndexed: 'unique',\r\n      }),\r\n\r\n      password: password({ validation: { isRequired: true } }),\r\n\r\n      // we can use this field to see what Posts this User has authored\r\n      //   more on that in the Post list below\r\n      posts: relationship({ ref: 'Post.author', many: true }),\r\n\r\n      createdAt: timestamp({\r\n        // this sets the timestamp to Date.now() when the user is first created\r\n        defaultValue: { kind: 'now' },\r\n      }),\r\n    },\r\n  }),\r\n\r\n  Post: list({\r\n    // WARNING\r\n    //   for this starter project, anyone can create, query, update and delete anything\r\n    //   if you want to prevent random people on the internet from accessing your data,\r\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n    access: allowAll,\r\n\r\n    // this is the fields for our Post list\r\n    fields: {\r\n      title: text({ validation: { isRequired: true } }),\r\n\r\n      // the document field can be used for making rich editable content\r\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\r\n      content: document({\r\n        formatting: true,\r\n        layouts: [\r\n          [1, 1],\r\n          [1, 1, 1],\r\n          [2, 1],\r\n          [1, 2],\r\n          [1, 2, 1],\r\n        ],\r\n        links: true,\r\n        dividers: true,\r\n      }),\r\n\r\n      // with this field, you can set a User as the author for a Post\r\n      author: relationship({\r\n        // we could have used 'User', but then the relationship would only be 1-way\r\n        ref: 'User.posts',\r\n\r\n        // this is some customisations for changing how this will look in the AdminUI\r\n        ui: {\r\n          displayMode: 'cards',\r\n          cardFields: ['name', 'email'],\r\n          inlineEdit: { fields: ['name', 'email'] },\r\n          linkToItem: true,\r\n          inlineConnect: true,\r\n        },\r\n\r\n        // a Post can only have one author\r\n        //   this is the default, but we show it here for verbosity\r\n        many: false,\r\n      }),\r\n\r\n      // with this field, you can add some Tags to Posts\r\n      tags: relationship({\r\n        // we could have used 'Tag', but then the relationship would only be 1-way\r\n        ref: 'Tag.posts',\r\n\r\n        // a Post can have many Tags, not just one\r\n        many: true,\r\n\r\n        // this is some customisations for changing how this will look in the AdminUI\r\n        ui: {\r\n          displayMode: 'cards',\r\n          cardFields: ['name'],\r\n          inlineEdit: { fields: ['name'] },\r\n          linkToItem: true,\r\n          inlineConnect: true,\r\n          inlineCreate: { fields: ['name'] },\r\n        },\r\n      }),\r\n    },\r\n  }),\r\n\r\n  // this last list is our Tag list, it only has a name field for now\r\n  Tag: list({\r\n    // WARNING\r\n    //   for this starter project, anyone can create, query, update and delete anything\r\n    //   if you want to prevent random people on the internet from accessing your data,\r\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n    access: allowAll,\r\n\r\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\r\n    ui: {\r\n      isHidden: true,\r\n    },\r\n\r\n    // this is the fields for our Tag list\r\n    fields: {\r\n      name: text(),\r\n      // this can be helpful to find out all the Posts associated with a Tag\r\n      posts: relationship({ ref: 'Post.tags', many: true }),\r\n    },\r\n  }),\r\n\r\n  // brand\r\n  Brand: list({\r\n    access: allowAll,\r\n    fields: {\r\n      name: text(),\r\n      models: relationship({ ref: 'Model.brand', many: true }),\r\n      products: relationship({ ref: 'Product.brand', many: true }),\r\n      updateAt: timestamp(),\r\n    }\r\n  }),\r\n\r\n  // model\r\n  Model: list({\r\n    access: allowAll,\r\n    fields: {\r\n      name: text(),\r\n      brand: relationship({ ref: 'Brand.models' }),\r\n      capacities: relationship({ ref: 'Capacity.model', many: true }),\r\n      colors: relationship({ ref: 'Color.model', many: true }),\r\n      versions: relationship({ ref: 'Version.model', many: true }),\r\n      products: relationship({ ref: 'Product.model', many: true }),\r\n      updateAt: timestamp()\r\n    }\r\n  }),\r\n\r\n  // capacity\r\n  Capacity: list({\r\n    access: allowAll,\r\n    fields: {\r\n      name: text(),\r\n      model: relationship({ ref: 'Model.capacities' }),\r\n      products: relationship({ ref: 'Product.capacity', many: true }),\r\n      updateAt: timestamp()\r\n    }\r\n  }),\r\n\r\n  // color\r\n  Color: list({\r\n    access: allowAll,\r\n    fields: {\r\n      name: text(),\r\n      model: relationship({ ref: 'Model.colors' }),\r\n      products: relationship({ ref: 'Product.color', many: true }),\r\n      updateAt: timestamp(),\r\n      picture: text(),\r\n    }\r\n  }),\r\n\r\n  // version\r\n  Version: list({\r\n    access: allowAll,\r\n    fields: {\r\n      name: text(),\r\n      model: relationship({ ref: 'Model.versions' }),\r\n      products: relationship({ ref: 'Product.version', many: true }),\r\n      updateAt: timestamp()\r\n    }\r\n  }),\r\n\r\n  // product\r\n  Product: list({\r\n    access: allowAll,\r\n    fields: {\r\n      price: text(),\r\n      brand: relationship({ ref: 'Brand.products' }),\r\n      model: relationship({ ref: 'Model.products' }),\r\n      capacity: relationship({ ref: 'Capacity.products' }),\r\n      color: relationship({ ref: 'Color.products' }),\r\n      version: relationship({ ref: 'Version.products' }),\r\n      name: text(),\r\n      description: text(),\r\n      updateAt: timestamp()\r\n    }\r\n  })\r\n};\r\n", "// Welcome to some authentication for Keystone\r\n//\r\n// This is using @keystone-6/auth to add the following\r\n// - A sign-in page for your Admin UI\r\n// - A cookie-based stateless session strategy\r\n//    - Using a User email as the identifier\r\n//    - 30 day cookie expiration\r\n//\r\n// This file does not configure what Users can do, and the default for this starter\r\n// project is to allow anyone - logged-in or not - to do anything.\r\n//\r\n// If you want to prevent random people on the internet from accessing your data,\r\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\r\n//\r\n// If you want to learn more about how our out-of-the-box authentication works, please\r\n// read https://keystonejs.com/docs/apis/auth#authentication-api\r\n\r\nimport { randomBytes } from 'crypto';\r\nimport { createAuth } from '@keystone-6/auth';\r\n\r\n// see https://keystonejs.com/docs/apis/session for the session docs\r\nimport { statelessSessions } from '@keystone-6/core/session';\r\n\r\n// for a stateless session, a SESSION_SECRET should always be provided\r\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\r\nlet sessionSecret = process.env.SESSION_SECRET;\r\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\r\n  sessionSecret = randomBytes(32).toString('hex');\r\n}\r\n\r\n// withAuth is a function we can use to wrap our base configuration\r\nconst { withAuth } = createAuth({\r\n  listKey: 'User',\r\n  identityField: 'email',\r\n\r\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\r\n  //   this can be helpful for when you are writing your access control functions\r\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n  sessionData: 'name createdAt',\r\n  secretField: 'password',\r\n\r\n  // WARNING: remove initFirstItem functionality in production\r\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\r\n  initFirstItem: {\r\n    // if there are no items in the database, by configuring this field\r\n    //   you are asking the Keystone AdminUI to create a new user\r\n    //   providing inputs for these fields\r\n    fields: ['name', 'email', 'password'],\r\n\r\n    // it uses context.sudo() to do this, which bypasses any access control you might have\r\n    //   you shouldn't use this in production\r\n  },\r\n});\r\n\r\n// statelessSessions uses cookies for session tracking\r\n//   these cookies have an expiry, in seconds\r\n//   we use an expiry of 30 days for this starter\r\nconst sessionMaxAge = 60 * 60 * 24 * 30;\r\n\r\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\r\nconst session = statelessSessions({\r\n  maxAge: sessionMaxAge,\r\n  secret: sessionSecret!,\r\n});\r\n\r\nexport { withAuth, session };\r\n"],
  "mappings": "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",
  "names": ["import_core"]
}
